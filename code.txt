#if defined(ESP32)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <DHT.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <DNSServer.h>          // Include the DNSServer library
#include <WiFiManager.h>        // Include the WiFiManager library

// Define NTP Client to get time (All of this is needed to have a correct timestamp format)
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

// DHT11 Configuration
#define DHTPIN 4       // Digital pin connected to the DHT sensor D14
#define DHTTYPE DHT11  // DHT 11
#define RELAY_PIN 1    // Digital pin connected to  D1

DHT dht(DHTPIN, DHTTYPE);

// Firebase Portion
/* 1. Define the API Key */
#define API_KEY "AIzaSyC9NbfEWwnW2l4bbJsVLml44h--MGvTc_8"  


/* 2. Define the project ID */
#define FIREBASE_PROJECT_ID "temperature-9d0fb"

/* 3. Define the user Email and password that already registered or added in your project */
#define USER_EMAIL "alosyndiel4@gmail.com"
#define USER_PASSWORD "alosyndiel123"

// Define Firebase Data object
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;

String path = "Monitor";  // set the Firestore collection id here

void setup() {
  Serial.begin(115200);
  delay(3000);
  Serial.println("Hello User, Please wait while I set things up");

  delay(2000);
  Serial.println("**********************************");
  Serial.println("   Welcome to My system   ");
  Serial.println("**********************************");

  delay(2000);
  Serial.println("Initializing...");
  delay(1000);

  // WiFiManager setup
  WiFiManager wifiManager;
  wifiManager.autoConnect("AutoConnectAP");  // Create a Wi-Fi hotspot for configuration if not connected
  
  timeClient.begin();

  Serial.println("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("WiFi connected to ");
  Serial.println(WiFi.localIP());

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);
  delay(3000);

  Serial.println("Calibrating DHT11 Sensor...");
  delay(3000);
  Serial.println("...");

  // Read DHT11 Sensor
  float temperature = dht.readTemperature();

  delay(3000);
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println("°C [Check]✓ ");

  delay(3000);  // delay start for 3 seconds

  pinMode(RELAY_PIN, OUTPUT);  // Set the relay pin as an output

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the user sign-in credentials */
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  /* Assign the callback function for the long-running token generation task */
  config.token_status_callback = tokenStatusCallback;  // see addons/TokenHelper.h

  Firebase.begin(&config, &auth);

  Firebase.reconnectWiFi(true);

  delay(3000);  // delay start for 3 seconds

  //----------------------------------------------
  // Getting the user UID might take a few seconds
  //-----------------------------------------------
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  //-----------------
  // Print user UID
  //------------------
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);
}

void loop() {

  delay(2000);  // Wait for 2 seconds between readings
  //-------------------
  //Create Document
  //-------------------
  FirebaseJson content;



  // Read temperature in Celsius
  float temperature = dht.readTemperature();

  if (!isnan(temperature)) {
    if (temperature >= 28.0) {
      digitalWrite(RELAY_PIN, HIGH); // Turn on the relay if temperature is higher than 35 degrees Celsius
      Serial.println("Relay ON");
    } else {
      digitalWrite(RELAY_PIN, LOW); // Turn off the relay if temperature is lower than 35 degrees Celsius
      Serial.println("Relay OFF");
    }
  //---------------------
  // Set the documents
  //---------------------
  content.set("fields/RelayStatus/stringValue", digitalRead(RELAY_PIN) ? "ON" : "OFF");
  content.set("fields/TemperatureLevel/stringValue", String(temperature) + "°C");
  

  //---------------------
  // Set DateTime field with current time
  //---------------------
  timeClient.update();
  time_t now = timeClient.getEpochTime();

  if (now == 0) {
    Serial.println("Error getting current time");
  } else {
    // Set timestamp field with current time
    char timestampStr[30];
    strftime(timestampStr, sizeof(timestampStr), "%FT%TZ", gmtime(&now));
    content.set("fields/DateTime/timestampValue", timestampStr);
  }

  // Randomize Document ID
  String randomStr = "";
  const char* chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

  for (int i = 0; i < 20; i++) {
    randomStr += chars[random(0, 61)];
  }
  uid = randomStr + String(millis());

  // Create and Send Document to Firestore
  Serial.print("Creating document... ");
  delay(3000);  // delay start for 3 seconds
  Serial.println("Done");
  delay(3000);  // delay start for 3 seconds
  Serial.println("");
  Serial.print("Sending document.... ");

  // Creates the Document and Send to Firestore
    if (Firebase.Firestore.createDocument(&fbdo, FIREBASE_PROJECT_ID, "" /* databaseId can be (default) or empty */, path.c_str(), content.raw())) {
      Serial.printf("Success\n%s\n\n", fbdo.payload().c_str());
    } else {
      Serial.print(fbdo.errorReason());
    }
  } else {
    Serial.println("Invalid temperature value (NaN)");
  }

  delay(10000);  // 10 secs delay
}
